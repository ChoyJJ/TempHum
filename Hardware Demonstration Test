

#include <DHT.h>
//Wifi Manager is currently not used, will be included in future upgrades
#include <ESP8266WiFi.h>

// include the library code:
#include <LiquidCrystal.h>

#define DHTPIN 14
// Digital pin connected to the DHT sensor, connected to D5
// Feather HUZZAH ESP8266 note: use pins 3, 4, 5, 12, 13 or 14 --

//Button for Temperature only (D0 pin)
#define BTN1 16
//Button for Temperature and Humidity (D1 pin)
#define BTN2 5

// Define the type of DHT used, In this project DHT11 is used
#define DHTTYPE DHT11   // DHT 11

DHT dht(DHTPIN, DHTTYPE);
//Setting pin for Reset, Enable, D4, D5,D6,D7
//Pin connected D3, D4, D6, D7, D8, Tx
LiquidCrystal lcd(0, 2, 12, 13, 15, 1);
float h, t;
//Set the LCD number of text and number of lines
const int LCDTEXT = 16, LCDLINE = 2;
//Possible use for timeout function, currently not implemented
int BTNMODE = 0;

void setup() {
  dht.begin();
  pinMode(BTN1, INPUT);
  pinMode(BTN2, INPUT);
  delay(1000);
  lcd.begin(LCDTEXT, LCDLINE);
  lcd.print("Initialising");
  int rt = 0;
  while (digitalRead(BTN1) || digitalRead(BTN2)) {
    rt = rt + 1;
    delay(100);
    lcd.setCursor(0, 1);
    lcd.print(rt / 10);
    if (rt == 50) {
      lcd.clear();
      lcd.print("Check wire");
      lcd.setCursor(0,1);
      lcd.print("connection.");
      delay(2000);
      ESP.restart();
    }
  }
}

void loop() {
  int T = digitalRead(BTN1);
  int H = digitalRead(BTN2);
  //if no button has been pushed, the lcd will display to prompt user to push bytton
  if (BTNMODE == 0) {
    int n = 0;
    lcd.clear();
    lcd.print("Waiting request");
    lcd.setCursor(0, 1);
    //Waiting for user to input, while waiting will constantly show a flow of "."
    while (digitalRead(BTN1) == 0 && digitalRead(BTN2) == 0) {
      //When 2nd line is full, clear the display
      if (n == 16) {
        for (int i = 0 ; i < 16; i++) {
          lcd.setCursor(i, 1);
          lcd.println(" ");
        }
        lcd.setCursor(0, 1);
        n = 0;
      }
      lcd.print(".");
      n = n + 1;
      delay(200);
    }
  }

  if (T) {
    DHTSENSOR();
    DHTLCDPRINT_TEMP();
    BTNMODE = 1;
    delay(1000);
  }
  else if (H) {
    DHTSENSOR();
    DHTLCDPRINT_ALL();
    BTNMODE = 1;
    delay(1000);
  }
  else {
    return;
  }

}


void DHTLCDPRINT_TEMP() {
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("Temp: " + String(t) + char(223) + "C ");
  delay(100);
}
void DHTLCDPRINT_ALL() {
  lcd.begin(16, 2);
  lcd.setCursor(0, 0);
  lcd.print("Temp: " + String(t) + char(223) + "C ");
  lcd.setCursor(0, 1);
  lcd.print("Humid: " + String(h) + "% ");
  delay(100);
}



void DHTSENSOR() {
  // Wait a few seconds between measurements.
  
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  t = dht.readTemperature();


}
